Angular 2 

Introduction: 
Angular is a web framework that¡¯s being used by fast growing startups, as well as large companies, more and more employers are looking for web developers with AngularJS skills. 


Angular is a front end JavaScript framework that allows you to rapidly develop robust, single page web applications.


Angular is a JavaScript MVC framework for developing Mobile and Responsive web Applications.

Redesigned from the ground up by Google, AngularJS 2 provides advanced features for building single-page applications: declarative templates, two-way data binding, TypeScript support, and dependency injection. 

And instead of the controllers typical of MVC architecture, AngularJS 2 now offers components.

It's a great update, suitable for mobile and web developers alike.


for mobile apps, we can Ionic in angular 2.

* It is Modular

* It is based on components and directives.

* It uses annotations for configuring directives, styles, providers , dependency injection.

* It uses observables instead of promises.

* we can write angular 2 components either in JavaScript or Typesript.


* It changes the states based on Data Changes , not based on DOM changes.

* It uses TypeScript for Programing Angular2 Mobile and Desktop applications

* Typescript is OOP programing language

* This Typescript can be compiled to Plain Old JavaScript.

* We use Metadata to configure components.

* A component is a OOP class.

* we can use metadata to configure HTML template and Define CSS styles.
	template:
	styles:

* A component is a kind of a Directive.

* Angular2 includes 3 types directives.
	* Components
	* Structural Directives (ngFor)
	* Attribute directives (ngStyle)

* Components communicate with each other.

* Components use selectors and routing to communicate.

* Angular2 Annotations
	To add metadata to our class( component).
	Synonym for Annotation is Decorator

* Decorator is a function that adds Metadata to a class. 

e.g.
	@Component is an Annotation

* @Component describes details about the Component( Selectors, templates, styles)




Angular 2 Basics:

Angular applications are made of components. 

A component is the combination of an HTML template and a component class that controls a portion of the screen. Here is an example of a component that displays a simple string:

e.g.
app/app.component.ts


import { Component } from '@angular/core';

@Component({
  selector: 'my-app',
  template: `<h1>Hello {{name}}</h1>`
})
export class AppComponent { name = 'Angular'; }



Every component begins with a @Component decorator function that takes a metadata object. 

The metadata object describes how the HTML template and component class work together.

The selector property tells Angular to display the component inside a custom <my-app> tag in the index.html.





Index.html

<my-app>Loading AppComponent content here ...</my-app>


The template property defines a message inside an <h1> header. 

The message starts with "Hello" and ends with {{name}} which is an Angular interpolation binding expression. 

At runtime, Angular replaces {{name}} with the value of the component's name property.




Note:
Angular 2 uses TypeScript because its types make it easy to support developer productivity with tooling. 

You can also write Angular code in JavaScript.



SETUP FOR LOCAL DEVELOPMENT:

Make sure you have node and npm installed. Then:


* Create a project folder.

* create package.json, tsconfig.json, systemjs.config.js in the application root directory.

* Install the npm packages.("npm install").

* Run "npm start" to launch the sample application.


App folder structure:

	Angular2Project
		App
			app.component.ts
			app.module.ts
			main.ts
			
		Index.html(Shell Page)
		package.json
		tsconfig.json
		systemjs.config.js
	

app.component.ts:	
It is the root component of what will become a tree of nested components as the application evolves.

app.module.ts:
Defines AppModule, the root module that tells Angular how to assemble the application. 

main.ts	:
Compiles the application with the JiT compiler and bootstraps the application to run in the browser. 




app/app.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'my-app',
  template: `<h1>Hello {{name}}</h1>`,
})
export class AppComponent  { name = 'Angular'; }



app/app.module.ts

import { NgModule }      from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent }  from './app.component';

@NgModule({
  imports:      [ BrowserModule ],
  declarations: [ AppComponent ],
  bootstrap:    [ AppComponent ]
})
export class AppModule { }


app/main.ts

import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app.module';

platformBrowserDynamic().bootstrapModule(AppModule);



package.json
{
  "name": "angular-quickstart",
  "version": "1.0.0",
  "description": "\"QuickStart package.json from the documentation, supplemented with testing",

  "support\",": null,
  "scripts": {
    "start": "tsc && concurrently \"tsc -w\" \"lite-server\" ",
    "e2e": "\"tsc && concurrently \\\"http-server -s\\\" \\\"protractor protractor.config.js\\\" --",

    "lint": "tslint ./app/**/*.ts -t verbose",
    "lite": "lite-server",
    "pree2e": "webdriver-manager update",
    "test": "tsc && concurrently \"tsc -w\" \"karma start karma.conf.js\"",
    "test-once": "tsc && karma start karma.conf.js --single-run",
    "tsc": "tsc",
    "tsc:w": "tsc -w"
  },
  "keywords": [],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "@angular/common": "~2.2.0",
    "@angular/compiler": "~2.2.0",
    "@angular/core": "~2.2.0",
    "@angular/forms": "~2.2.0",
    "@angular/http": "~2.2.0",
    "@angular/platform-browser": "~2.2.0",
    "@angular/platform-browser-dynamic": "~2.2.0",
    "@angular/router": "~3.2.0",

    "angular-in-memory-web-api": "~0.1.15",
    "systemjs": "0.19.40",
    "core-js": "^2.4.1",
    "reflect-metadata": "^0.1.8",
    "rxjs": "5.0.0-beta.12",
    "zone.js": "^0.6.26"
  },
  "devDependencies": {
    "concurrently": "^3.1.0",
    "lite-server": "^2.2.2",
    "typescript": "^2.0.10",

    "canonical-path": "0.0.2",
    "http-server": "^0.9.0",
    "tslint": "^3.15.1",
    "lodash": "^4.16.4",
    "jasmine-core": "~2.4.1",
    "karma": "^1.3.0",
    "karma-chrome-launcher": "^2.0.0",
    "karma-cli": "^1.0.1",
    "karma-jasmine": "^1.0.2",
    "karma-jasmine-html-reporter": "^0.2.2",
    "protractor": "4.0.9",
    "webdriver-manager": "10.2.5",
    "rimraf": "^2.5.4",

    "@types/node": "^6.0.46",
    "@types/jasmine": "^2.5.36",
    "@types/selenium-webdriver": "^2.53.33"
  },
  "repository": {}
}



tsconfig.json

{
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "moduleResolution": "node",
    "sourceMap": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "lib": [ "es2015", "dom" ],
    "noImplicitAny": true,
    "suppressImplicitAnyIndexErrors": true
  }
}

systemjs.config.js

/**
 * System configuration for Angular samples
 * Adjust as necessary for your application needs.
 */
(function (global) {
    System.config({
        paths: {
            // paths serve as alias
            'npm:': 'node_modules/'
        },
        // map tells the System loader where to look for things
        map: {
            // our app is within the app folder
            app: 'app',

            // angular bundles
            '@angular/core': 'npm:@angular/core/bundles/core.umd.js',
            '@angular/common': 'npm:@angular/common/bundles/common.umd.js',
            '@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.js',
            '@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.js',
        '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',
    '@angular/http': 'npm:@angular/http/bundles/http.umd.js',
    '@angular/router': 'npm:@angular/router/bundles/router.umd.js',
    '@angular/forms': 'npm:@angular/forms/bundles/forms.umd.js',

    // other libraries
    'rxjs':                      'npm:rxjs',
    'angular-in-memory-web-api': 'npm:angular-in-memory-web-api/bundles/in-memory-web-api.umd.js'
},
    // packages tells the System loader how to load when no filename and/or no extension
packages: {
    app: {
            main: './main.js',
            defaultExtension: 'js'
    },
    rxjs: {
            defaultExtension: 'js'
    }
}
});
})(this);




Index.html

<!DOCTYPE html>
<html>
  <head>
    <title>Angular QuickStart</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Polyfill(s) for older browsers -->
    <script src="node_modules/core-js/client/shim.min.js"></script>

    <script src="node_modules/zone.js/dist/zone.js"></script>
    <script src="node_modules/reflect-metadata/Reflect.js"></script>
    <script src="node_modules/systemjs/dist/system.src.js"></script>

    <script src="systemjs.config.js"></script>
    <script>
      System.import('app').catch(function(err){ console.error(err); });
    </script>
  </head>

  <body>
    <my-app>Loading AppComponent content here ...</my-app>
  </body>
</html>


npm install

npm start
=============================================================================================



